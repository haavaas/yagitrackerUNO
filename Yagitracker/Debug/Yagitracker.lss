
Yagitracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800200  00800200  0000046e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d8  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001001  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154f  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013d19  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040b  00000000  00000000  00017db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000181bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000050e5  00000000  00000000  00018234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	64 c0       	rjmp	.+200    	; 0x13e <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 31       	cpi	r26, 0x12	; 18
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d1       	rcall	.+516    	; 0x30a <main>
 106:	77 c1       	rjmp	.+750    	; 0x3f6 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <adc_init>:
#include "asf.h"
#include "uart.h"
volatile int last_adc_value;

int adc_init(void){
	DDRF &= ~(1<<0);
 10a:	80 98       	cbi	0x10, 0	; 16
	last_adc_value = 52;
 10c:	84 e3       	ldi	r24, 0x34	; 52
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <last_adc_value+0x1>
 114:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <last_adc_value>

	
	ADCSRA = 0b10101111; //Set adc enable, auto trigger enable, interrupt enable, divition factor 128
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	8f ea       	ldi	r24, 0xAF	; 175
 11e:	80 83       	st	Z, r24
	ADCSRB &= ~0b00000111; // Set free running auto trigger
 120:	ab e7       	ldi	r26, 0x7B	; 123
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	8c 91       	ld	r24, X
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	8c 93       	st	X, r24
	ADMUX = 0b01000001; // Set 5V ref, left adjusted at ADC0 
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	sei();
 130:	78 94       	sei
	ADCSRA |= (1<<ADSC);
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	return 1;
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <__vector_29>:

ISR(ADC_vect){
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	last_adc_value = ADC;
 14c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 150:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 154:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <last_adc_value+0x1>
 158:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <last_adc_value>
	last_adc_value = last_adc_value&0x03ff;
 15c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <last_adc_value>
 160:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <last_adc_value+0x1>
 164:	93 70       	andi	r25, 0x03	; 3
 166:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <last_adc_value+0x1>
 16a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <last_adc_value>
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <A1_16_Ini>:

unsigned short checksum_1;
unsigned short checksum_2;

void A1_16_Ini(void){
	DDRD &= ~(1<<2);			//set the RXD input
 17c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<2);		//pull-high the RXD pinout
 17e:	5a 9a       	sbi	0x0b, 2	; 11
 180:	08 95       	ret

00000182 <A1_16_SetPosition>:
}

void A1_16_SetPosition(unsigned char _pID, unsigned char _CMD,  unsigned char _playtime, unsigned int _position){
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	27 97       	sbiw	r28, 0x07	; 7
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	static unsigned int _data[5];
	static int _i = 0;
	
	if(_CMD == CMD_S_JOG){
 1a6:	66 30       	cpi	r22, 0x06	; 6
 1a8:	91 f4       	brne	.+36     	; 0x1ce <A1_16_SetPosition+0x4c>
		_data[0] = _playtime;
 1aa:	e2 e0       	ldi	r30, 0x02	; 2
 1ac:	f2 e0       	ldi	r31, 0x02	; 2
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	51 83       	std	Z+1, r21	; 0x01
 1b2:	40 83       	st	Z, r20
		_data[1] = _position&0xff;
 1b4:	a9 01       	movw	r20, r18
 1b6:	55 27       	eor	r21, r21
 1b8:	53 83       	std	Z+3, r21	; 0x03
 1ba:	42 83       	std	Z+2, r20	; 0x02
		_data[2] = (_position&0xff00)>>8;
 1bc:	34 83       	std	Z+4, r19	; 0x04
 1be:	15 82       	std	Z+5, r1	; 0x05
		_data[3] = 0;					//set:0(position control), 1(speed control), 2(torque off), 3(position servo on)
 1c0:	17 82       	std	Z+7, r1	; 0x07
 1c2:	16 82       	std	Z+6, r1	; 0x06
		_data[4] = _pID;
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	31 87       	std	Z+9, r19	; 0x09
 1ca:	20 87       	std	Z+8, r18	; 0x08
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <A1_16_SetPosition+0x72>
	}
	else if (_CMD == CMD_I_JOG){
 1ce:	65 30       	cpi	r22, 0x05	; 5
 1d0:	89 f4       	brne	.+34     	; 0x1f4 <A1_16_SetPosition+0x72>
		_data[0] = _position&0xff;
 1d2:	e2 e0       	ldi	r30, 0x02	; 2
 1d4:	f2 e0       	ldi	r31, 0x02	; 2
 1d6:	d9 01       	movw	r26, r18
 1d8:	bb 27       	eor	r27, r27
 1da:	b1 83       	std	Z+1, r27	; 0x01
 1dc:	a0 83       	st	Z, r26
		_data[1] = (_position&0xff00)>>8;
 1de:	32 83       	std	Z+2, r19	; 0x02
 1e0:	13 82       	std	Z+3, r1	; 0x03
		_data[2] = 0;					//set:0(position control), 1(speed control), 2(torque off), 3(position servo on)
 1e2:	15 82       	std	Z+5, r1	; 0x05
 1e4:	14 82       	std	Z+4, r1	; 0x04
		_data[3] = _pID;
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	37 83       	std	Z+7, r19	; 0x07
 1ec:	26 83       	std	Z+6, r18	; 0x06
		_data[4] = _playtime;
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	51 87       	std	Z+9, r21	; 0x09
 1f2:	40 87       	std	Z+8, r20	; 0x08
	}
	checksum_1 = (0x0c)^_pID^_CMD;		//package_size^pID^CMD
 1f4:	4c e0       	ldi	r20, 0x0C	; 12
 1f6:	48 27       	eor	r20, r24
 1f8:	46 27       	eor	r20, r22
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	02 e0       	ldi	r16, 0x02	; 2
 1fe:	12 e0       	ldi	r17, 0x02	; 2
 200:	0f 2e       	mov	r0, r31
 202:	fc e0       	ldi	r31, 0x0C	; 12
 204:	ef 2e       	mov	r14, r31
 206:	f2 e0       	ldi	r31, 0x02	; 2
 208:	ff 2e       	mov	r15, r31
 20a:	f0 2d       	mov	r31, r0
 20c:	f8 01       	movw	r30, r16
	for(_i = 0;_i < 5;_i++) checksum_1 ^= _data[_i];
 20e:	21 91       	ld	r18, Z+
 210:	31 91       	ld	r19, Z+
 212:	24 27       	eor	r18, r20
 214:	35 27       	eor	r19, r21
 216:	a9 01       	movw	r20, r18
 218:	ee 15       	cp	r30, r14
 21a:	ff 05       	cpc	r31, r15
 21c:	c1 f7       	brne	.-16     	; 0x20e <A1_16_SetPosition+0x8c>
 21e:	45 e0       	ldi	r20, 0x05	; 5
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <_edata+0x1>
 226:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <_edata>
	checksum_1 &= 0xfe;
 22a:	2e 7f       	andi	r18, 0xFE	; 254
 22c:	33 27       	eor	r19, r19
 22e:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <checksum_1+0x1>
 232:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <checksum_1>
	checksum_2 = (~checksum_1)&0xfe;
 236:	a9 01       	movw	r20, r18
 238:	40 95       	com	r20
 23a:	50 95       	com	r21
 23c:	4e 7f       	andi	r20, 0xFE	; 254
 23e:	55 27       	eor	r21, r21
 240:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <checksum_2+0x1>
 244:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <checksum_2>
	
	char _header[7] = {0xff, 0xff, 0x0c, _pID, _CMD, checksum_1, checksum_2};
 248:	9f ef       	ldi	r25, 0xFF	; 255
 24a:	99 83       	std	Y+1, r25	; 0x01
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	9c e0       	ldi	r25, 0x0C	; 12
 250:	9b 83       	std	Y+3, r25	; 0x03
 252:	8c 83       	std	Y+4, r24	; 0x04
 254:	6d 83       	std	Y+5, r22	; 0x05
 256:	2e 83       	std	Y+6, r18	; 0x06
 258:	4f 83       	std	Y+7, r20	; 0x07
 25a:	ce 01       	movw	r24, r28
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	6c 01       	movw	r12, r24
 260:	5e 01       	movw	r10, r28
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	a9 0e       	add	r10, r25
 266:	b1 1c       	adc	r11, r1
	Serial1.write(checksum_2);
	
	for(_i = 0;_i < 5;_i++) Serial1.write(_data[_i]);
	*/
	for(int i = 0; i < 7; i++){
		uart_send_char(_header[i], 1);
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	f6 01       	movw	r30, r12
 26e:	81 91       	ld	r24, Z+
 270:	6f 01       	movw	r12, r30
 272:	1e d0       	rcall	.+60     	; 0x2b0 <uart_send_char>
	Serial1.write(checksum_1);
	Serial1.write(checksum_2);
	
	for(_i = 0;_i < 5;_i++) Serial1.write(_data[_i]);
	*/
	for(int i = 0; i < 7; i++){
 274:	ac 14       	cp	r10, r12
 276:	bd 04       	cpc	r11, r13
 278:	b9 f7       	brne	.-18     	; 0x268 <A1_16_SetPosition+0xe6>
		uart_send_char(_header[i], 1);
	}
	for(int i = 0; i < 5; i++){
		uart_send_char(_data[i], 1);
 27a:	f8 01       	movw	r30, r16
 27c:	80 81       	ld	r24, Z
 27e:	0e 5f       	subi	r16, 0xFE	; 254
 280:	1f 4f       	sbci	r17, 0xFF	; 255
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	14 d0       	rcall	.+40     	; 0x2b0 <uart_send_char>
	for(_i = 0;_i < 5;_i++) Serial1.write(_data[_i]);
	*/
	for(int i = 0; i < 7; i++){
		uart_send_char(_header[i], 1);
	}
	for(int i = 0; i < 5; i++){
 288:	0e 15       	cp	r16, r14
 28a:	1f 05       	cpc	r17, r15
 28c:	b1 f7       	brne	.-20     	; 0x27a <A1_16_SetPosition+0xf8>
		uart_send_char(_data[i], 1);
	}
 28e:	27 96       	adiw	r28, 0x07	; 7
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	bf 90       	pop	r11
 2ac:	af 90       	pop	r10
 2ae:	08 95       	ret

000002b0 <uart_send_char>:
}

char uart_receive(FILE __stream){
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
 2b0:	61 15       	cp	r22, r1
 2b2:	71 05       	cpc	r23, r1
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <uart_send_char+0x16>
 2b6:	e0 ec       	ldi	r30, 0xC0	; 192
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	90 81       	ld	r25, Z
 2bc:	95 ff       	sbrs	r25, 5
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <uart_send_char+0xa>
 2c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2c4:	08 95       	ret
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	71 05       	cpc	r23, r1
 2ca:	39 f4       	brne	.+14     	; 0x2da <uart_send_char+0x2a>
 2cc:	e8 ec       	ldi	r30, 0xC8	; 200
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	90 81       	ld	r25, Z
 2d2:	95 ff       	sbrs	r25, 5
 2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <uart_send_char+0x20>
 2d6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 2da:	08 95       	ret

000002dc <uart_init>:
void uart_init(void)
{
	DDRD |= (1<<PD1);
 2dc:	51 9a       	sbi	0x0a, 1	; 10
	DDRD |= (1<<PD3);
 2de:	53 9a       	sbi	0x0a, 3	; 10
	UBRR0H = (MYUBBR>>8);
 2e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = MYUBBR; // Define the registers
 2e4:	28 e0       	ldi	r18, 0x08	; 8
 2e6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00); // Set 8 bit
 2ea:	9e e0       	ldi	r25, 0x0E	; 14
 2ec:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Enable TX and RX
 2f0:	88 e1       	ldi	r24, 0x18	; 24
 2f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>


	UBRR1H = (MYUBBR>>8);
 2f6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = MYUBBR; // Define the registers
 2fa:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UCSR1C = (1<<USBS0) | (3<<UCSZ00); // Set 8 bit
 2fe:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	UCSR1B = (1<<RXEN0) | (1<<TXEN0); // Enable TX and RX
 302:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 306:	08 95       	ret

00000308 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 308:	08 95       	ret

0000030a <main>:
#include "motor.h"
#include "adc.h"


int main (void)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <main+0x6>
 310:	1f 92       	push	r1
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
	uart_init();
	adc_init();
 316:	de b7       	in	r29, 0x3e	; 62
 318:	f7 df       	rcall	.-18     	; 0x308 <board_init>
	A1_16_Ini();
 31a:	e0 df       	rcall	.-64     	; 0x2dc <uart_init>
 31c:	f6 de       	rcall	.-532    	; 0x10a <adc_init>
 31e:	2e df       	rcall	.-420    	; 0x17c <A1_16_Ini>
 320:	7e 01       	movw	r14, r28
 322:	26 e0       	ldi	r18, 0x06	; 6
 324:	e2 0e       	add	r14, r18
		itoa(last_adc_value, pot_value, 10);
		for(int i = 0; i<5; i++){
			uart_send_char(pot_value[i], 0);
		}
		uart_send_char('\n', 0);
		ADCSRA |= (1<<ADSC);
 326:	f1 1c       	adc	r15, r1
 328:	0f 2e       	mov	r0, r31
 32a:	fa e7       	ldi	r31, 0x7A	; 122
 32c:	cf 2e       	mov	r12, r31
 32e:	d1 2c       	mov	r13, r1
	A1_16_Ini();
	while(1){
		//UDR0 = 'a';
		//uart_send_char('a');
		char pot_value[5];
		itoa(last_adc_value, pot_value, 10);
 330:	f0 2d       	mov	r31, r0
 332:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <last_adc_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 336:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <last_adc_value+0x1>
 33a:	4a e0       	ldi	r20, 0x0A	; 10
 33c:	be 01       	movw	r22, r28
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	26 d0       	rcall	.+76     	; 0x390 <__itoa_ncheck>
		for(int i = 0; i<5; i++){
			uart_send_char(pot_value[i], 0);
 344:	8e 01       	movw	r16, r28
 346:	0f 5f       	subi	r16, 0xFF	; 255
 348:	1f 4f       	sbci	r17, 0xFF	; 255
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
	while(1){
		//UDR0 = 'a';
		//uart_send_char('a');
		char pot_value[5];
		itoa(last_adc_value, pot_value, 10);
		for(int i = 0; i<5; i++){
 34e:	f8 01       	movw	r30, r16
 350:	81 91       	ld	r24, Z+
			uart_send_char(pot_value[i], 0);
		}
		uart_send_char('\n', 0);
 352:	8f 01       	movw	r16, r30
 354:	ad df       	rcall	.-166    	; 0x2b0 <uart_send_char>
 356:	0e 15       	cp	r16, r14
 358:	1f 05       	cpc	r17, r15
 35a:	b9 f7       	brne	.-18     	; 0x34a <main+0x40>
		ADCSRA |= (1<<ADSC);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	a6 df       	rcall	.-180    	; 0x2b0 <uart_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	f6 01       	movw	r30, r12
 366:	80 81       	ld	r24, Z
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	80 83       	st	Z, r24
 36c:	ff ef       	ldi	r31, 0xFF	; 255
 36e:	23 ed       	ldi	r18, 0xD3	; 211
 370:	80 e3       	ldi	r24, 0x30	; 48
 372:	f1 50       	subi	r31, 0x01	; 1
		_delay_ms(1000);
		A1_16_SetPosition(0x01,0x05,0,last_adc_value);
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x68>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x72>
 37c:	00 00       	nop
 37e:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <last_adc_value>
 382:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <last_adc_value+0x1>
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	65 e0       	ldi	r22, 0x05	; 5
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	fa de       	rcall	.-524    	; 0x182 <A1_16_SetPosition>
 38e:	d1 cf       	rjmp	.-94     	; 0x332 <main+0x28>

00000390 <__itoa_ncheck>:
 390:	bb 27       	eor	r27, r27
 392:	4a 30       	cpi	r20, 0x0A	; 10
 394:	31 f4       	brne	.+12     	; 0x3a2 <__itoa_ncheck+0x12>
 396:	99 23       	and	r25, r25
 398:	22 f4       	brpl	.+8      	; 0x3a2 <__itoa_ncheck+0x12>
 39a:	bd e2       	ldi	r27, 0x2D	; 45
 39c:	90 95       	com	r25
 39e:	81 95       	neg	r24
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <__utoa_common>

000003a4 <__utoa_ncheck>:
 3a4:	bb 27       	eor	r27, r27

000003a6 <__utoa_common>:
 3a6:	fb 01       	movw	r30, r22
 3a8:	55 27       	eor	r21, r21
 3aa:	aa 27       	eor	r26, r26
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	aa 1f       	adc	r26, r26
 3b2:	a4 17       	cp	r26, r20
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__utoa_common+0x14>
 3b6:	a4 1b       	sub	r26, r20
 3b8:	83 95       	inc	r24
 3ba:	50 51       	subi	r21, 0x10	; 16
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <__utoa_common+0x6>
 3be:	a0 5d       	subi	r26, 0xD0	; 208
 3c0:	aa 33       	cpi	r26, 0x3A	; 58
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__utoa_common+0x20>
 3c4:	a9 5d       	subi	r26, 0xD9	; 217
 3c6:	a1 93       	st	Z+, r26
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	79 f7       	brne	.-34     	; 0x3aa <__utoa_common+0x4>
 3cc:	b1 11       	cpse	r27, r1
 3ce:	b1 93       	st	Z+, r27
 3d0:	11 92       	st	Z+, r1
 3d2:	cb 01       	movw	r24, r22
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <strrev>

000003d6 <strrev>:
 3d6:	dc 01       	movw	r26, r24
 3d8:	fc 01       	movw	r30, r24
 3da:	67 2f       	mov	r22, r23
 3dc:	71 91       	ld	r23, Z+
 3de:	77 23       	and	r23, r23
 3e0:	e1 f7       	brne	.-8      	; 0x3da <strrev+0x4>
 3e2:	32 97       	sbiw	r30, 0x02	; 2
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <strrev+0x18>
 3e6:	7c 91       	ld	r23, X
 3e8:	6d 93       	st	X+, r22
 3ea:	70 83       	st	Z, r23
 3ec:	62 91       	ld	r22, -Z
 3ee:	ae 17       	cp	r26, r30
 3f0:	bf 07       	cpc	r27, r31
 3f2:	c8 f3       	brcs	.-14     	; 0x3e6 <strrev+0x10>
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
